{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _createClass from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _assertThisInitialized from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _wrapNativeSuper from\"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";var _templateObject;import{gql}from\"@apollo/client\";import client from\"./index\";var ErrorLowConfidence=/*#__PURE__*/function(_Error){_inherits(ErrorLowConfidence,_Error);var _super=_createSuper(ErrorLowConfidence);function ErrorLowConfidence(){var _this;_classCallCheck(this,ErrorLowConfidence);_this=_super.call(this);Error.captureStackTrace(_assertThisInitialized(_this),_this.constructor);return _this;}return ErrorLowConfidence;}(/*#__PURE__*/_wrapNativeSuper(Error));// ActionProvider starter code\nvar ActionProvider=/*#__PURE__*/function(){function ActionProvider(createChatbotMessage,setStateFunc,createClientMessage){_classCallCheck(this,ActionProvider);this.createChatbotMessage=createChatbotMessage;this.setState=setStateFunc;this.createClientMessage=createClientMessage;}_createClass(ActionProvider,[{key:\"searchNlusByName\",value:function(){var _searchNlusByName=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(intent,entity,role,trait){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:data=client.query({query:gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n          query Nlus($intent: String!, $entity: String!, $role: String, $trait: String!) {\\n            nlus(intent: $intent, entity: $entity, role: $role, trait: $trait) {\\n              intent {\\n                text\\n              }\\n              entity {\\n                text\\n              }\\n              role {\\n                text\\n              }\\n              trait {\\n                text\\n              }\\n            }\\n          }\\n        \"]))),variables:{intent:intent,entity:entity,role:role,trait:trait}}).then(function(_ref){var loading=_ref.loading,error=_ref.error,data=_ref.data;return data;});return _context.abrupt(\"return\",data);case 2:case\"end\":return _context.stop();}}},_callee);}));function searchNlusByName(_x,_x2,_x3,_x4){return _searchNlusByName.apply(this,arguments);}return searchNlusByName;}()},{key:\"greet\",value:function(){var _greet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(respuesta){var intent,conf_intent,ent,ent_rol,conf_ent,trai,conf_trai,text_intent,text_entity,text_role,text_trait,role,mensaje,greetingMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;intent=respuesta.intents[0].name;conf_intent=respuesta.intents[0].confidence;ent=Object.values(Object.values(respuesta.entities)[0])[0].name;ent_rol=Object.values(Object.values(respuesta.entities)[0])[0].role;conf_ent=Object.values(Object.values(respuesta.entities)[0])[0].confidence;trai=Object.values(Object.values(respuesta.traits)[0])[0].value;conf_trai=Object.values(Object.values(respuesta.traits)[0])[0].confidence;text_intent=\"\";text_entity=\"\";text_role=\"\";text_trait=\"\";if(!(conf_intent<0.7||conf_ent<0.7||conf_trai<0.7)){_context2.next=14;break;}throw new ErrorLowConfidence();case 14:role=null;if(ent_rol!==ent){role=ent_rol;}_context2.next=18;return this.searchNlusByName(intent,ent,role,trai).then(function(data){var response=data.nlus;text_intent=response.intent.text;text_entity=response.entity.text;if(response.role){text_role=response.role.text;}text_trait=response.trait.text;});case 18:// mensaje = a+b+c+d\nmensaje=text_intent+\" - \"+text_entity+\" - \"+text_role+\" - \"+text_trait;greetingMessage=this.createChatbotMessage(mensaje);this.updateChatbotState(greetingMessage);_context2.next=27;break;case 23:_context2.prev=23;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);this.updateChatbotState(this.createChatbotMessage(\"No entiendo tu pregunta\"));case 27:case\"end\":return _context2.stop();}}},_callee2,this,[[0,23]]);}));function greet(_x5){return _greet.apply(this,arguments);}return greet;}()//fin funcion\n},{key:\"updateChatbotState\",value:function updateChatbotState(message){// NOTE: This function is set in the constructor, and is passed in\n// from the top level Chatbot component. The setState function here\n// actually manipulates the top level state of the Chatbot, so it's\n// important that we make sure that we preserve the previous state.\nthis.setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{messages:[].concat(_toConsumableArray(prevState.messages),[message])});});}}]);return ActionProvider;}();export default ActionProvider;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/chatbot_fisica/src/ActionProvider.js"],"names":["gql","client","ErrorLowConfidence","Error","captureStackTrace","constructor","ActionProvider","createChatbotMessage","setStateFunc","createClientMessage","setState","intent","entity","role","trait","data","query","variables","then","loading","error","respuesta","intents","name","conf_intent","confidence","ent","Object","values","entities","ent_rol","conf_ent","trai","traits","value","conf_trai","text_intent","text_entity","text_role","text_trait","searchNlusByName","response","nlus","text","mensaje","greetingMessage","updateChatbotState","console","log","message","prevState","messages"],"mappings":"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","sourcesContent":["import { gql } from \"@apollo/client\";\r\nimport client from \"./index\";\r\n\r\nclass ErrorLowConfidence extends Error {\r\n  constructor() {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\n// ActionProvider starter code\r\nclass ActionProvider {\r\n  \r\n  constructor(createChatbotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatbotMessage = createChatbotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n  }\r\n\r\n  async searchNlusByName(intent, entity, role, trait) {\r\n    let data = client\r\n      .query({\r\n        query: gql`\r\n          query Nlus($intent: String!, $entity: String!, $role: String, $trait: String!) {\r\n            nlus(intent: $intent, entity: $entity, role: $role, trait: $trait) {\r\n              intent {\r\n                text\r\n              }\r\n              entity {\r\n                text\r\n              }\r\n              role {\r\n                text\r\n              }\r\n              trait {\r\n                text\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: { intent: intent, entity: entity, role: role, trait: trait }\r\n      })\r\n      .then(({ loading, error, data }) => { return data });\r\n\r\n    return data;\r\n\r\n  }\r\n\r\n  async greet(respuesta) {\r\n    try {\r\n      const intent = respuesta.intents[0].name;\r\n      const conf_intent = respuesta.intents[0].confidence;\r\n      const ent = Object.values(Object.values(respuesta.entities)[0])[0].name;\r\n      const ent_rol = Object.values(Object.values(respuesta.entities)[0])[0].role;\r\n      const conf_ent = Object.values(Object.values(respuesta.entities)[0])[0].confidence;\r\n      const trai = Object.values(Object.values(respuesta.traits)[0])[0].value;\r\n      const conf_trai = Object.values(Object.values(respuesta.traits)[0])[0].confidence;\r\n\r\n      let text_intent = \"\";\r\n      let text_entity = \"\";\r\n      let text_role = \"\";\r\n      let text_trait = \"\";\r\n\r\n      if (conf_intent < 0.7 || conf_ent < 0.7 || conf_trai < 0.7) {\r\n        throw new ErrorLowConfidence();\r\n      }\r\n\r\n      let role = null\r\n      if (ent_rol !== ent) {\r\n        role = ent_rol\r\n      }\r\n      await this.searchNlusByName(intent, ent, role, trai).then((data) => {\r\n        let response = data.nlus\r\n        text_intent = response.intent.text;\r\n        text_entity = response.entity.text;\r\n        if (response.role){\r\n          text_role = response.role.text;\r\n        }\r\n        text_trait = response.trait.text;\r\n      });\r\n\r\n      // mensaje = a+b+c+d\r\n      const mensaje =\r\n        text_intent +\r\n        \" - \" +\r\n        text_entity +\r\n        \" - \" +\r\n        text_role +\r\n        \" - \" +\r\n        text_trait;\r\n\r\n      const greetingMessage = this.createChatbotMessage(mensaje);\r\n      this.updateChatbotState(greetingMessage);\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.updateChatbotState(\r\n        this.createChatbotMessage(\"No entiendo tu pregunta\")\r\n      );\r\n    }\r\n  } //fin funcion\r\n\r\n  updateChatbotState(message) {\r\n    // NOTE: This function is set in the constructor, and is passed in\r\n    // from the top level Chatbot component. The setState function here\r\n    // actually manipulates the top level state of the Chatbot, so it's\r\n    // important that we make sure that we preserve the previous state.\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      messages: [...prevState.messages, message]\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"]},"metadata":{},"sourceType":"module"}