{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createClass from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"C:/Users/Usuario/Documents/chatbot_fisica/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\nvar _templateObject;\n\nimport { gql } from \"@apollo/client\";\nimport client from \"./index\";\n\nvar ErrorLowConfidence = /*#__PURE__*/function (_Error) {\n  _inherits(ErrorLowConfidence, _Error);\n\n  var _super = _createSuper(ErrorLowConfidence);\n\n  function ErrorLowConfidence() {\n    var _this;\n\n    _classCallCheck(this, ErrorLowConfidence);\n\n    _this = _super.call(this);\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n\n  return ErrorLowConfidence;\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // ActionProvider starter code\n\n\nvar ActionProvider = /*#__PURE__*/function () {\n  function ActionProvider(createChatbotMessage, setStateFunc, createClientMessage) {\n    _classCallCheck(this, ActionProvider);\n\n    this.createChatbotMessage = createChatbotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n  _createClass(ActionProvider, [{\n    key: \"searchNlusByName\",\n    value: function () {\n      var _searchNlusByName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(intent, entity, role, trait) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = client.query({\n                  query: gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n          query Nlus($intent: String!, $entity: String!, $role: String, $trait: String!) {\\n            nlus(intent: $intent, entity: $entity, role: $role, trait: $trait) {\\n              intent {\\n                text\\n              }\\n              entity {\\n                text\\n              }\\n              role {\\n                text\\n              }\\n              trait {\\n                text\\n              }\\n            }\\n          }\\n        \"]))),\n                  variables: {\n                    intent: intent,\n                    entity: entity,\n                    role: role,\n                    trait: trait\n                  }\n                }).then(function (_ref) {\n                  var loading = _ref.loading,\n                      error = _ref.error,\n                      data = _ref.data;\n                  return data;\n                });\n                return _context.abrupt(\"return\", data);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function searchNlusByName(_x, _x2, _x3, _x4) {\n        return _searchNlusByName.apply(this, arguments);\n      }\n\n      return searchNlusByName;\n    }()\n  }, {\n    key: \"greet\",\n    value: function () {\n      var _greet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(respuesta) {\n        var intent, conf_intent, ent, ent_rol, conf_ent, trai, conf_trai, text_intent, text_entity, text_role, text_trait, role, mensaje, greetingMessage;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n\n                /*\r\n                // intent\r\n                console.log(respuesta.intents[0].name, respuesta.intents[0].confidence);\r\n                // entity\r\n                const ent = Object.values(Object.values(respuesta.entities)[0])[0].name;\r\n                // role\r\n                const ent_rol = Object.values(Object.values(respuesta.entities)[0])[0]\r\n                  .role;\r\n                // confidence\r\n                const conf_ent = Object.values(Object.values(respuesta.entities)[0])[0]\r\n                  .confidence;\r\n                console.log(ent, ent_rol, conf_ent);\r\n                // trait\r\n                const trai = Object.values(Object.values(respuesta.traits)[0])[0].value;\r\n                const conf_trai = Object.values(Object.values(respuesta.traits)[0])[0]\r\n                  .confidence;\r\n                console.log(trai, conf_trai);\r\n                */\n                intent = \"intent1\";\n                conf_intent = 0.75;\n                ent = \"entity1\";\n                ent_rol = \"role1\";\n                conf_ent = 0.8;\n                trai = \"trait1\";\n                conf_trai = 0.9;\n                text_intent = \"\";\n                text_entity = \"\";\n                text_role = \"\";\n                text_trait = \"\";\n\n                if (!(conf_intent < 0.7 || conf_ent < 0.7 || conf_trai < 0.7)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                throw new ErrorLowConfidence();\n\n              case 14:\n                role = null;\n\n                if (ent_rol !== ent) {\n                  role = ent_rol;\n                }\n\n                _context2.next = 18;\n                return this.searchNlusByName(intent, ent, role, trai).then(function (data) {\n                  var response = data.nlus;\n                  text_intent = response.intent.text;\n                  text_entity = response.entity.text;\n\n                  if (response.role) {\n                    text_role = response.role.text;\n                  }\n\n                  text_trait = response.trait.text;\n                });\n\n              case 18:\n                // mensaje = a+b+c+d\n                mensaje = text_intent + \" - \" + text_entity + \" - \" + text_role + \" - \" + text_trait;\n                greetingMessage = this.createChatbotMessage(mensaje);\n                this.updateChatbotState(greetingMessage);\n                _context2.next = 27;\n                break;\n\n              case 23:\n                _context2.prev = 23;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                this.updateChatbotState(this.createChatbotMessage(\"No entiendo tu pregunta\"));\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 23]]);\n      }));\n\n      function greet(_x5) {\n        return _greet.apply(this, arguments);\n      }\n\n      return greet;\n    }() //fin funcion\n\n  }, {\n    key: \"updateChatbotState\",\n    value: function updateChatbotState(message) {\n      // NOTE: This function is set in the constructor, and is passed in\n      // from the top level Chatbot component. The setState function here\n      // actually manipulates the top level state of the Chatbot, so it's\n      // important that we make sure that we preserve the previous state.\n      this.setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          messages: [].concat(_toConsumableArray(prevState.messages), [message])\n        });\n      });\n    }\n  }]);\n\n  return ActionProvider;\n}();\n\nexport default ActionProvider;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/chatbot_fisica/src/ActionProvider.js"],"names":["gql","client","ErrorLowConfidence","Error","captureStackTrace","constructor","ActionProvider","createChatbotMessage","setStateFunc","createClientMessage","setState","intent","entity","role","trait","data","query","variables","then","loading","error","respuesta","conf_intent","ent","ent_rol","conf_ent","trai","conf_trai","text_intent","text_entity","text_role","text_trait","searchNlusByName","response","nlus","text","mensaje","greetingMessage","updateChatbotState","console","log","message","prevState","messages"],"mappings":"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","sourcesContent":["import { gql } from \"@apollo/client\";\r\nimport client from \"./index\";\r\n\r\nclass ErrorLowConfidence extends Error {\r\n  constructor() {\r\n    super();\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\n// ActionProvider starter code\r\nclass ActionProvider {\r\n  \r\n  constructor(createChatbotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatbotMessage = createChatbotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n  }\r\n\r\n  async searchNlusByName(intent, entity, role, trait) {\r\n    let data = client\r\n      .query({\r\n        query: gql`\r\n          query Nlus($intent: String!, $entity: String!, $role: String, $trait: String!) {\r\n            nlus(intent: $intent, entity: $entity, role: $role, trait: $trait) {\r\n              intent {\r\n                text\r\n              }\r\n              entity {\r\n                text\r\n              }\r\n              role {\r\n                text\r\n              }\r\n              trait {\r\n                text\r\n              }\r\n            }\r\n          }\r\n        `,\r\n        variables: { intent: intent, entity: entity, role: role, trait: trait }\r\n      })\r\n      .then(({ loading, error, data }) => { return data });\r\n\r\n    return data;\r\n\r\n  }\r\n\r\n  async greet(respuesta) {\r\n    try {\r\n      /*\r\n      // intent\r\n      console.log(respuesta.intents[0].name, respuesta.intents[0].confidence);\r\n      // entity\r\n      const ent = Object.values(Object.values(respuesta.entities)[0])[0].name;\r\n      // role\r\n      const ent_rol = Object.values(Object.values(respuesta.entities)[0])[0]\r\n        .role;\r\n      // confidence\r\n      const conf_ent = Object.values(Object.values(respuesta.entities)[0])[0]\r\n        .confidence;\r\n      console.log(ent, ent_rol, conf_ent);\r\n      // trait\r\n      const trai = Object.values(Object.values(respuesta.traits)[0])[0].value;\r\n      const conf_trai = Object.values(Object.values(respuesta.traits)[0])[0]\r\n        .confidence;\r\n      console.log(trai, conf_trai);\r\n      */\r\n\r\n      const intent = \"intent1\";\r\n      const conf_intent = 0.75;\r\n      const ent = \"entity1\";\r\n      const ent_rol = \"role1\";\r\n      const conf_ent = 0.8;\r\n      const trai = \"trait1\";\r\n      const conf_trai = 0.9;\r\n\r\n      let text_intent = \"\";\r\n      let text_entity = \"\";\r\n      let text_role = \"\";\r\n      let text_trait = \"\";\r\n\r\n      if (conf_intent < 0.7 || conf_ent < 0.7 || conf_trai < 0.7) {\r\n        throw new ErrorLowConfidence();\r\n      }\r\n\r\n      let role = null\r\n      if (ent_rol !== ent) {\r\n        role = ent_rol\r\n      }\r\n      await this.searchNlusByName(intent, ent, role, trai).then((data) => {\r\n        let response = data.nlus\r\n        text_intent = response.intent.text;\r\n        text_entity = response.entity.text;\r\n        if (response.role){\r\n          text_role = response.role.text;\r\n        }\r\n        text_trait = response.trait.text;\r\n      });\r\n\r\n      // mensaje = a+b+c+d\r\n      const mensaje =\r\n        text_intent +\r\n        \" - \" +\r\n        text_entity +\r\n        \" - \" +\r\n        text_role +\r\n        \" - \" +\r\n        text_trait;\r\n\r\n      const greetingMessage = this.createChatbotMessage(mensaje);\r\n      this.updateChatbotState(greetingMessage);\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.updateChatbotState(\r\n        this.createChatbotMessage(\"No entiendo tu pregunta\")\r\n      );\r\n    }\r\n  } //fin funcion\r\n\r\n  updateChatbotState(message) {\r\n    // NOTE: This function is set in the constructor, and is passed in\r\n    // from the top level Chatbot component. The setState function here\r\n    // actually manipulates the top level state of the Chatbot, so it's\r\n    // important that we make sure that we preserve the previous state.\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      messages: [...prevState.messages, message]\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"]},"metadata":{},"sourceType":"module"}